Thinking in C

1. Ponteiros e Arrays:

Quando declaramos um ponteiro como constante, o endereço de memória para o
qual ele aponta pode ser alterado, mas não o valor contido no mesmo. Ou seja,
quando um ponteiro é declarado como constante, ele é um ponteiro read-only
protegido por código; exemplo:

  void sp_to_dash(const char *s){
    while(*s){
      if (*s==' ') printf("%c", '-');
      else printf("%c", *s);
      ++s; //incrementamos o endereço de memoria em s pelo tamanho de um char
           //apesar deste ser declarado como const;
    }
  }
--------------------------------------------------------------------------------

Quando declarado como argumento de uma função, C não verifica compatibilidade
de tamanho entre as arrays, ele simplesmente entende a array como um ponteiro.
As seguintes declarações são validas e equivalentes (do ponto de vista do
compilador):

  void teste(int var[7]);

  void teste(int var[]);

  void teste(int *var);

Todas declaram var como um ponteiro para inteiros.
--------------------------------------------------------------------------------

Ponteiros são utilizados para acessar arrays porque normalmente aritmética de 
ponteiros é realizado mais rápido do que indexação de arrays; Exemplo para array
de duas dimensões:

  int a[7][5];

  //para acessar o elemento a[3][5] como ponteiros, fazemos:
  *((int*)a+26) = 10; //26=3*7+5;
--------------------------------------------------------------------------------

char *p = "hello world"; //is a valid statement and can be used! This works
because the way compiler handle strings. It creates a table that stores all the
strings and p receives the address of "hello world" inside this table.
--------------------------------------------------------------------------------

malloc() returns as null pointer, but in C, when it is assigned to another type
pointer, automatic cast is performed; example:

  char *name;
  name = malloc(1000); //allocates to name an space of 1000bytes or 1000chars;

This is not true in C++, thus to count for portability, explicit cast is usually
used
--------------------------------------------------------------------------------

Structs:

You can define a struct (similar to a object with only parameters) using the
struct keyword; example:

  struct Alarm{
    char name[22];
    unsigned char hour;
    unsigned char minute;
    unsigned char second;
    struct alarm *ptr_nxt;
  }my_alarm = {"wake_up", 6, 30, 0, 0};  

To declare a pointer to the object "my_alarm", you can use * and & as usual:

  struct Alarm *my_ptr = &my_alarm;

To access variables and their memory addresses:

  my_alarm.hour = 7;
  my_ptr->minute = 0;
  
  printf("%s\n", my_alarm.name);
  printf("address of my_alarm.minute: %p\n", &my_alarm.minute);
  printf("address of my_alarm.second: %p\n", &my_ptr->second);

As we can se, the dot and arrow operators have precedence over '&'.
The dot operator used with a pointer to a struct is not allowed by the compiler;
--------------------------------------------------------------------------------

Console IO:

EOF macro is defined in the <stdio.h> and usually is equals to -1;
the putchar() returns the charecter written or EOF if an error occurs;
gets() function is dangerous and should not me used. Use fgets() instead;

Formated Console IO:




File IO:

--------------------------------------------------------------------------------

Preprocessor macros:

All the preprocessor macros start with a # sign. Each preprocessing directve
must be defined on its own line.

In the #define preprocessor macro, the statement is terminated only by a new
line. To continue an statement in another one can place a backslash at the
end of the first line; example:

#define SOME_TAG "replace SOME_TAG \
with this."

Testar:

#define SOME_TAG "replace SOME_TAG"\
" with this."

The '#undef' directve removes a previously defined macro. It is used primary to
allow macro names to be localized only within the piece of code that needs
them.
-------------------------------------------------------------------------------

C99

'restrict':
Verificar na declaração da função memcpy no header string.h o uso do qualifier
'restrict'; Verificar o que acontece quando se tenta copiar duas regioes da
memoria com overlapping;

'inline':
The 'inline' keyword is used with functions and tells the compiler to try to
optmize function calls; Typically it means that the function's code will be
expanded in line, rather than called. However, inline is only a request to the
compiler and it can be ignored. 'inline' is also compatible with C++.

_Bool data type:
It stores the values 1 and 0; It is an integer type and it is not compatible
with C++, with defines a 'bool' data type instead. However, C99 adds the header
<stdbool.h> which defines the macros bool, true, and false, making easy to
port code between C and C++.

_Complex and _Imaginary:
C99 implements the complex numbers' arithmetic; The <complex.h> header define
the 'complex' and 'imaginary' macros. The following data types are defined:

float/double/long double complex/imaginary

long long int/unsigned long long int:
Defines a integer of at least 8 bytes CHECK THAT!

Array Enhancements:
C99 has added two important features to arrays, variable length and the ability
to include type qualifiers in their declarations.

C99 also allows the variables to be declared at any part before its first
usage.
--------------------------------------------------------------------------------


Dicas em C:

- Em C, uma função declarada - não definida - sem argumentos, por exemplo

  int funcao();

significa uma função com número e tipos quaisquer de argumentos.
--------------------------------------------------------------------------------

- Quando insere-se alguma biblioteca ou header, no inicio do programa, é como se
o código contido na biblioteca fosse copiado (hard-coded) previamente em seu
programa, no ponto aonde o mesmo é inserido;
--------------------------------------------------------------------------------

 - Using a for loop to read a string, char by char:

  #include <stdio.h>
  int main(void){
    char a[50];
    int i;
  
    for(i = 0; i < 49 && (a[i] = getchar()) != '\n'; i++){
      ;
    }
    a[i] = 0;

    puts(a);
    return 0;
  }
--------------------------------------------------------------------------------
