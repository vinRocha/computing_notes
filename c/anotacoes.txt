Thinking in C

1. Ponteiros e Arrays:

Quando declaramos um ponteiro como constante, o endereço de memória para o
qual ele aponta pode ser alterado, mas não o valor contido no mesmo. Ou seja,
quando um ponteiro é declarado como constante, ele é um ponteiro read-only
protegido por código; exemplo:

  void sp_to_dash(const char *s){
    while(*s){
      if (*s==' ') printf("%c", '-');
      else printf("%c", *s);
      ++s; //incrementamos o endereço de memoria em s pelo tamanho de um char
           //apesar deste ser declarado como const;
    }
  }
--------------------------------------------------------------------------------

Quando declarado como argumento de uma função, C não verifica compatibilidade
de tamanho entre as arrays, ele simplesmente entende a array como um ponteiro.
As seguintes declarações são validas e equivalentes (do ponto de vista do
compilador):

  void teste(int var[7]);

  void teste(int var[]);

  void teste(int *var);

Todas declaram var como um ponteiro para inteiros.
--------------------------------------------------------------------------------

Ponteiros são utilizados para acessar arrays porque normalmente aritmética de 
ponteiros é realizado mais rápido do que indexação de arrays; Exemplo para array
de duas dimensões:

  int a[7][5];

  //para acessar o elemento a[3][5] como ponteiros, fazemos:
  *((int*)a+26) = 10; //26=3*7+5;
--------------------------------------------------------------------------------

char *p = "hello world"; //is a valid statement and can be used! This works
because the way compiler handle strings. It creates a table that stores all the
strings and p receives the address of "hello world" inside this table.
--------------------------------------------------------------------------------

malloc() returns as null pointer, but in C, when it is assigned to another type
pointer, automatic cast is performed; example:

  char *name;
  name = malloc(1000); //allocates to name an space of 1000bytes or 1000chars;

This is not true in C++, thus to count for portability, explicit cast is usually
used
--------------------------------------------------------------------------------

Dicas em C:

- Em C, uma função declarada - não definida - sem argumentos, por exemplo

  int funcao();

significa uma função com número e tipos quaisquer de argumentos.
--------------------------------------------------------------------------------

- Quando insere-se alguma biblioteca ou header, no inicio do programa, é como se
o código contido na biblioteca fosse copiado (hard-coded) previamente em seu
programa, no ponto aonde o mesmo é inserido;
--------------------------------------------------------------------------------
